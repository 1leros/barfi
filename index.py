import streamlit as st
import pickle
import os
import json

# –ü—É—Å—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ö–µ–º –±—É–¥–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º
SCHEMA_FILE = "schemas.pkl"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ö–µ–º
def load_schemas():
    if os.path.exists(SCHEMA_FILE):
        with open(SCHEMA_FILE, "rb") as f:
            return pickle.load(f)
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ö–µ–º
def save_schemas(schemas):
    with open(SCHEMA_FILE, "wb") as f:
        pickle.dump(schemas, f)

# –†–µ–∞–ª–∏–∑—É–µ–º delete_schema
def delete_schema(name):
    schemas = load_schemas()
    if name not in schemas:
        st.error(f"–°—Ö–µ–º–∞ —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    del schemas[name]
    save_schemas(schemas)
    st.success(f"–°—Ö–µ–º–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

# –†–µ–∞–ª–∏–∑—É–µ–º merge_schemas
def merge_schemas(files):
    merged_schemas = load_schemas()
    for file in files:
        try:
            with open(file, "rb") as f:
                new_schemas = pickle.load(f)

            for name, schema in new_schemas.items():
                if name in merged_schemas:
                    new_name = st.text_input(
                        f"–ò–º—è '{name}' –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:",
                        f"{name}_merged",
                        key=name,
                    )
                    merged_schemas[new_name] = schema
                else:
                    merged_schemas[name] = schema
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file}: {e}")

    save_schemas(merged_schemas)
    st.success("–í—Å–µ —Å—Ö–µ–º—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º
def create_new_schema(name, schema_content):
    schemas = load_schemas()
    if name in schemas:
        st.error(f"–°—Ö–µ–º–∞ —Å –∏–º–µ–Ω–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
        return
    try:
        parsed_schema_content = json.loads(schema_content)
        schemas[name] = parsed_schema_content
        save_schemas(schemas)
        st.success(f"–°—Ö–µ–º–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except json.JSONDecodeError:
        st.error("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ö–µ–º—ã –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ö–µ–º
def display_schemas():
    schemas = load_schemas()
    if schemas:
        for name, content in schemas.items():
            with st.expander(f"–°—Ö–µ–º–∞: {name}", expanded=False):
                st.json(content)
    else:
        st.write("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ö–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
def main(schema_content=None):
    st.set_page_config(page_title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º–∞–º–∏", page_icon="üìä", layout="wide")

    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
    st.markdown(
        """
        <style>
        .stApp {
            background-color: #90ee90; /* –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω */
            color: black; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */
            font-family: 'Arial', sans-serif;
        }
        h1, h2, h3 {
            color: black; /* –¶–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
            text-align: center;
        }
        input, textarea {
            color: black; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞ */
        }
        .stButton > button {
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .stButton > button:hover {
            background-color: #0056b3;
        }
        .sidebar .sidebar-content {
            background-color: #007bff;
            color: white;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Node-based —Å—Ö–µ–º–∞–º–∏")

    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ö–µ–º")
    schemas = load_schemas()
    if schemas:
        st.write("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Ö–µ–º—ã:")
        for name in schemas.keys():
            st.write(f"‚Ä¢ {name}")

        st.header("üìú –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ö–µ–º")
        display_schemas()
    else:
        st.write("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Ö–µ–º.")

    st.header("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã")
    schema_to_delete = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ö–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    if st.button("–£–¥–∞–ª–∏—Ç—å"):
        delete_schema(schema_to_delete)

    st.header("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ö–µ–º")
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ —Å—Ö–µ–º–∞–º–∏:", accept_multiple_files=True
    )
    if st.button("–û–±—ä–µ–¥–∏–Ω–∏—Ç—å"):
        if uploaded_files:
            file_paths = []
            for uploaded_file in uploaded_files:
                temp_file_path = f"temp_{uploaded_file.name}"
                with open(temp_file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                file_paths.append(temp_file_path)

            merge_schemas(file_paths)

            for path in file_paths:
                os.remove(path)
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.")

    st.header("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É")
    new_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã:")
    new_schema = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ö–µ–º—ã (json –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞):")
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
        if new_name and new_schema:
            create_new_schema(new_name, new_schema)
        else:
            st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")

    st.header("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã")
    schema_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π —Å—Ö–µ–º—ã:")
    st.header("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ö–µ–º—ã")
    st.code(
        '''
        {
        'nodes': [
          {
            'type': 'Feed', 
            'id': 'node_17341976050490', 
            'name': 'Feed-1', 
            'options': [], 
            'state': {}, 
            'interfaces': [[
              'Output 1', 
              {
                'id': 'ni_17341976050491', 
                'value': None
              }
            ]], 
            'position': {
              'x': 41.089179548156956, 
              'y': 233.22473246135553
            }, 
              'width': 200, 
              'twoColumn': False, 
              'customClasses': ''
            }, 
            {
              'type': 'Result', 
              'id': 'node_17341976077762', 
              'name': 'Result-1', 
              'options': [], 
              'state': {}, 
              'interfaces': [[
                'Input 1', 
                {
                  'id': 'ni_17341976077773', 
                  'value': None
                }
              ]], 
              'position': {
                'x': 385.67895362663495, 
                'y': 233.22473246135553
              }, 
              'width': 200, 
              'twoColumn': False, 
              'customClasses': ''
            }], 
            'connections': [
              {
                'id': '17341976120417', 
                'from': 'ni_17341976050491', 
                'to': 'ni_17341976077773'
              }
            ], 
            'panning': {
              'x': 8.137931034482762, 
              'y': 4.349583828775266
            }, 
            'scaling': 0.9344444444444444
          }''', 'javascript')

    if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ö–µ–º—É"):
        if schema_name and schema_content:
            create_new_schema(schema_name, schema_content)
        else:
            st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ö–µ–º—ã!")

if __name__ == "__main__":
    main()
